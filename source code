#include <iostream>
#include <cctype>
#include <string>

using namespace std;

/* Character classes */
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99
#define EOF_CLASS -1

/* Token codes */
#define INT_LIT 10
#define IDENT 11
#define ASSIGN_OP 20
#define ADD_OP 21
#define SUB_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define LEFT_PAREN 25
#define RIGHT_PAREN 26
#define END_OF_INPUT 99

/* Globals */
int charClass;
string lexeme;
char nextChar;
int nextToken;
string input;
int pos = 0;

/* Function declarations */
void addChar();
void getChar();
void getNonBlank();
int lex();
int lookup(char ch);

/* Get the next character and classify it */
void getChar() {
    if (pos < input.size()) {
        nextChar = input[pos++];
        if (isalpha(nextChar))
            charClass = LETTER;
        else if (isdigit(nextChar))
            charClass = DIGIT;
        else
            charClass = UNKNOWN;
    } else {
        charClass = EOF_CLASS;
    }
}

/* Add nextChar to lexeme */
void addChar() {
    lexeme += nextChar;
}

/* Skip whitespace */
void getNonBlank() {
    while (isspace(nextChar)) {
        getChar();
    }
}

/* Recognize operators and parentheses */
int lookup(char ch) {
    switch (ch) {
        case '(': addChar(); return LEFT_PAREN;
        case ')': addChar(); return RIGHT_PAREN;
        case '+': addChar(); return ADD_OP;
        case '-': addChar(); return SUB_OP;
        case '*': addChar(); return MULT_OP;
        case '/': addChar(); return DIV_OP;
        case '=': addChar(); return ASSIGN_OP;
        default:  addChar(); return END_OF_INPUT;
    }
}

/* The main lexical analyzer */
int lex() {
    lexeme = "";
    getNonBlank();

    switch (charClass) {
        case LETTER:
            addChar();
            getChar();
            while (charClass == LETTER || charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = IDENT;
            break;

        case DIGIT:
            addChar();
            getChar();
            while (charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = INT_LIT;
            break;

        case UNKNOWN:
            nextToken = lookup(nextChar);
            getChar();
            break;

        case EOF_CLASS:
            nextToken = END_OF_INPUT;
            lexeme = "EOF";
            break;
    }

    cout << "Next token is: " << nextToken << ", Next lexeme is: " << lexeme << endl;
    return nextToken;
}

/* Main function */
int main() {
    cout << "Enter input string to analyze: ";
    getline(cin, input);

    getChar();
    do {
        lex();
    } while (nextToken != END_OF_INPUT);

    cout << "Lexical analysis complete.\n";
    return 0;
}
