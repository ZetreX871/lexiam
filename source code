#include <iostream>
#include <fstream>
#include <cctype>
#include <string>

using namespace std;

/* Character classes */
#define LETTER 0
#define DIGIT 1 
#define UNKNOWN 99
#define EOF_CLASS -1

/* Token codes */
#define INT_LIT 10
#define IDENT 11
#define KEYWORD 12

#define ASSIGN_OP 20
#define EQ_OP 21
#define NEQ_OP 22
#define LT_OP 23
#define GT_OP 24
#define LE_OP 25
#define GE_OP 26

#define ADD_OP 30
#define SUB_OP 31
#define MULT_OP 32
#define DIV_OP 33

#define LEFT_PAREN 40
#define RIGHT_PAREN 41

/* Globals */
int charClass;
string lexeme;
char nextChar;
int nextToken;
ifstream inFile;

/* Function declarations */
void addChar();
void getChar();
void getNonBlank();
int lex();
int lookup(char ch);

/******************************************************/
/* Main driver */
int main() {
    string filename;
    
    cout << "Enter the input filename (e.g., input.txt): ";
    cin >> filename;

    inFile.open(filename);
    if (!inFile.is_open()) {
        cerr << "ERROR - cannot open file: " << filename << endl;
        return 1;
    }

    cout << "Reading from file: " << filename << endl;
    getChar();
    do {
        lex();
    } while (nextToken != EOF);

    cout << "Done analyzing.\n";
    return 0;
}

/******************************************************/
/* lookup - lookup operators and parentheses and return token */
int lookup(char ch) {
    addChar();

    switch (ch) {
        case '=':
            getChar();
            if (nextChar == '=') {
                addChar();
                nextToken = EQ_OP;
            } else {
                nextToken = ASSIGN_OP;
                return nextToken; // Don't consume nextChar
            }
            break;

        case '!':
            getChar();
            if (nextChar == '=') {
                addChar();
                nextToken = NEQ_OP;
            } else {
                nextToken = UNKNOWN;
            }
            break;

        case '<':
            getChar();
            if (nextChar == '=') {
                addChar();
                nextToken = LE_OP;
            } else {
                nextToken = LT_OP;
                return nextToken;
            }
            break;

        case '>':
            getChar();
            if (nextChar == '=') {
                addChar();
                nextToken = GE_OP;
            } else {
                nextToken = GT_OP;
                return nextToken;
            }
            break;

        case '+':
            nextToken = ADD_OP; break;
        case '-':
            nextToken = SUB_OP; break;
        case '*':
            nextToken = MULT_OP; break;
        case '/':
            nextToken = DIV_OP; break;
        case '(':
            nextToken = LEFT_PAREN; break;
        case ')':
            nextToken = RIGHT_PAREN; break;
        default:
            nextToken = UNKNOWN; break;
    }

    getChar();
    return nextToken;
}

/******************************************************/
/* addChar - adds nextChar to lexeme */
void addChar() {
    lexeme += nextChar;
}

/******************************************************/
/* getChar - gets next character and sets character class */
void getChar() {
    if (inFile.get(nextChar)) {
        if (isalpha(nextChar))
            charClass = LETTER;
        else if (isdigit(nextChar))
            charClass = DIGIT;
        else
            charClass = UNKNOWN;
    } else {
        charClass = EOF_CLASS;
    }
}

/******************************************************/
/* getNonBlank - skips whitespace */
void getNonBlank() {
    while (isspace(nextChar))
        getChar();
}

/******************************************************/
/* lex - a simple lexical analyzer */
int lex() {
    lexeme.clear();
    getNonBlank();

    switch (charClass) {
        case LETTER:
            addChar();
            getChar();
            while (charClass == LETTER || charClass == DIGIT) {
                addChar();
                getChar();
            }

            // Check for keywords
            if (lexeme == "if" || lexeme == "int" || lexeme == "while" || lexeme == "return") {
                nextToken = KEYWORD;
            } else {
                nextToken = IDENT;
            }
            break;

        case DIGIT:
            addChar();
            getChar();
            while (charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = INT_LIT;
            break;

        case UNKNOWN:
            lookup(nextChar);
            getChar();
            break;

        case EOF_CLASS:
            lexeme = "EOF";
            nextToken = EOF;
            break;
    }

    // Output the token and lexeme
    cout << "Next token is: " << nextToken << ", Next lexeme is " << lexeme << endl;
    return nextToken;
}
